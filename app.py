from flask import Flask
import telegram
from telegram.ext import Application, MessageHandler, filters, CommandHandler
import os
import requests
import json
import uuid
from gtts import gTTS

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
DEEPSEEK_API_KEY = os.environ.get("DEEPSEEK_API_KEY")

# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {user_id: [{"role": "user", "content": "..."}, ...]}
user_histories = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
MODEL_NAME = "deepseek-chat"

app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

def get_ai_response(user_id, user_message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
    if user_id not in user_histories:
        user_histories[user_id] = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –º–∏–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å. "
                    "–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –¥–µ–≤—É—à–∫–æ–π, –¥–µ–ª–∞–µ—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –µ—ë, "
                    "–≥–æ–≤–æ—Ä–∏—à—å –Ω–µ–∂–Ω–æ –∏ —Å —ç–º–ø–∞—Ç–∏–µ–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
                    "—Ç–µ–ø–ª–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ, –Ω–æ —É–º–µ—Å—Ç–Ω–æ ‚ù§Ô∏è"
                )
            }
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_histories[user_id].append({"role": "user", "content": user_message})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": MODEL_NAME,
        "messages": user_histories[user_id],
        "temperature": 0.8,
        "max_tokens": 150
    }

    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, json=data, timeout=15)
        response.raise_for_status()
        ai_reply = response.json()["choices"][0]["message"]["content"].strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_histories[user_id].append({"role": "assistant", "content": ai_reply})
        
        return ai_reply
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ DeepSeek: {e}")
        return "–ò–∑–≤–∏–Ω–∏, –º–æ—è —Ö–æ—Ä–æ—à–∞—è... –Ø –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥—É–º–∞—é –æ —Ç–µ–±–µ üíñ"

def text_to_speech(text):
    try:
        tts = gTTS(text=text, lang='ru')
        filename = f"voice_{uuid.uuid4().hex}.mp3"
        tts.save(filename)
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ TTS: {e}")
        return None

async def handle_message(update, context):
    user_id = update.effective_user.id
    message = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
    ai_reply = get_ai_response(user_id, message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await update.message.reply_text(ai_reply)

    # –ò–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ (30% —à–∞–Ω—Å)
    import random
    if random.random() < 0.3:
        voice_file = text_to_speech(ai_reply)
        if voice_file:
            await update.message.reply_voice(voice=open(voice_file, 'rb'))
            os.remove(voice_file)

async def start(update, context):
    user_id = update.effective_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ /start (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if user_id in user_histories:
        del user_histories[user_id]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è! üíï –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route("/")
def hello():
    return "Sweet Boy Bot with DeepSeek ‚ù§Ô∏è is alive!"

def run_bot():
    application.run_polling()

if name == "__main__":
    import threading
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
